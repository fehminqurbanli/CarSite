// <auto-generated />
using CarSite.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarSite.DataAccess.Migrations
{
    [DbContext(typeof(EfCoreDbContext))]
    partial class EfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarSite.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.GeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("GeneralInfos");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.GeneralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralTypes");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.TB_Ads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ban_Type")
                        .HasColumnType("int");

                    b.Property<bool>("Barter")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Color_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Condisioner")
                        .HasColumnType("bit");

                    b.Property<bool>("Credit_Have")
                        .HasColumnType("bit");

                    b.Property<int>("Currency_Id")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Leather_Salon")
                        .HasColumnType("bit");

                    b.Property<bool>("Lyuk")
                        .HasColumnType("bit");

                    b.Property<int>("Model_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Park_Radar")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Rear_Camera")
                        .HasColumnType("bit");

                    b.Property<bool>("Seat_Heating")
                        .HasColumnType("bit");

                    b.Property<int>("Speed_Box")
                        .HasColumnType("int");

                    b.Property<int>("Transmission_Id")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TB_Ads");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.TB_AdsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ads_Id")
                        .HasColumnType("int");

                    b.Property<string>("CarImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Ads_Id");

                    b.ToTable("TB_AdsImages");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.GeneralInfo", b =>
                {
                    b.HasOne("CarSite.Entities.Concrete.GeneralType", "GeneralType")
                        .WithMany("GeneralInfo")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralType");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.Model", b =>
                {
                    b.HasOne("CarSite.Entities.Concrete.Brand", "brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.TB_AdsImages", b =>
                {
                    b.HasOne("CarSite.Entities.Concrete.TB_Ads", "TB_Ads")
                        .WithMany("TB_AdsImages")
                        .HasForeignKey("Ads_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TB_Ads");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.GeneralType", b =>
                {
                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("CarSite.Entities.Concrete.TB_Ads", b =>
                {
                    b.Navigation("TB_AdsImages");
                });
#pragma warning restore 612, 618
        }
    }
}
